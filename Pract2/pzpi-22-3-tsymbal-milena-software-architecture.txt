Харківський національний університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії




ЗВІТ
до практичного заняття №2 з дисципліни
«Архітектура програмного забезпечення»
на тему: « Архітектура відомих програмних систем»





Виконала
ст. гр. ПЗПІ-22-3
Цимбал Мілена Русланівна

Перевірив
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович






Харків 2025
1 ІСТОРІЯ ЗМІН

№	Дата	Версія звіту	Опис змін та виправлень
1	23.04.2025	0.1	Додано розділ завдання, опис виконаної роботи
2	24.04.2025	0.1	Сформульовано висновки роботи
3	25.04.2025	0.1	Наведено слайди презентації в додатку Б
4	26.04.2025	0.1	Наведено приклади програмного коду в додатку В
5	28.04.2025	0.1	Створено відеозапис доповіді та наведено в додатку А

2 ЗАВДАННЯ

Завдання цього практичного заняття — дослідити та проаналізувати архітектуру програмної системи YouTube, зокрема її основні компоненти, принципи роботи, використані технології та способи забезпечення масштабованості й надійності платформи.

2 ОПИС ВИКОНАНОЇ РОБОТИ

У межах практичної роботи було підготовлено доповідь і презентацію, представлену у відеоформаті (посилання — у додатку А), а слайди подано в додатку Б.
Архітектура програмної системи YouTube — це багаторівнева інфраструктура, що забезпечує стабільну й якісну доставку відеоконтенту мільярдам користувачів. Її головна мета — ефективне зберігання, обробка, передача та відтворення відео з мінімальними затримками незалежно від пристрою чи швидкості інтернету. Для цього використовуються обчислювальні потужності, розподілена інфраструктура Google, CDN та система балансування навантаження.
Серед архітектурних вимог — масштабованість, надійність, стійкість до збоїв, адаптивність до трафіку та персоналізація. Для їх досягнення застосовується мікросервісна архітектура, резервування серверів, автоматичне відновлення та глобальні датацентри.
YouTube складається з фронтенду (HTML5, JavaScript, Angular) та бекенду (C++, Java, Python, BigTable, Spanner, Colossus). Завантажені відео проходять кодування та транскодування (MPEG-DASH, HLS), розповсюджуються через CDN, а кешування знижує навантаження на сервери.
Персоналізація забезпечується машинним навчанням: система аналізує історію переглядів, реакції користувача та інші дані. Штучний інтелект використовується для модерації, виявлення порушень і захисту від шкідливого контенту.
YouTube інтегрується з іншими сервісами Google (Ads, Analytics, Cloud), що сприяє монетизації та реалізації бізнес-логіки. Дані про користувачів, коментарі, перегляди та метадані зберігаються у відповідних базах даних.
Платформа постійно стикається з викликами — зростанням обсягів даних, вимогами до якості стрімінгу, безпеки та адаптації до нових форматів. У майбутньому очікується розвиток генеративного контенту, вдосконалення AI-модерації та інструментів взаємодії з користувачами.

ВИСНОВКИ

У результаті виконання даної практичної роботи було досліджено архітектуру програмної системи YouTube. Розглянуто ключові проблеми, які ця архітектура покликана вирішувати, а також проаналізовано основні компоненти, з яких вона складається.
ДОДАТОК А
Посилання на відеозапис доповіді

Відеозапис доповіді на YouTube: https://youtu.be/PlGdN9IC2gA
Нижче наведено хронологічний опис доповіді.
00:00 – Привітання. Оголошується ім’я доповідача, його академічна група та тема доповіді — архітектура програмної системи YouTube.
00:13 – Вступ. Короткий огляд тематики доповіді. Пояснюється актуальність вивчення архітектури YouTube як прикладу масштабної системи для потокового відео.
00:40 – Загальна архітектура YouTube. Описується загальна структура системи: взаємодія клієнта з сервером, загальні принципи роботи системи доставки відео та обробки запитів.
01:16 – Вимоги до архітектури. Перераховуються основні вимоги до архітектури системи YouTube: масштабованість, доступність, швидка доставка контенту, безперебійність роботи, підтримка великої кількості одночасних користувачів.
02:41 – Модель доставки контенту CDN. Розглядається модель доставки контенту за допомогою розподілених серверів CDN (Content Delivery Network), що забезпечує мінімізацію затримок при перегляді відео.
03:17 – Фронтенд та бекенд YouTube. Описується призначення модулів фронтенду (інтерфейс користувача, взаємодія з API) та бекенду (обробка запитів, керування відео, авторизація, рекомендації).
03:53 – Бази даних. Наводиться огляд систем зберігання даних, які використовуються для збереження відео, метаданих, коментарів, профілів користувачів тощо.
04:16 – Технологічний стек. Описується набір технологій, які застосовуються для реалізації YouTube, зокрема мови програмування, фреймворки, сервіси Google Cloud тощо.
05:59 – Масштабованість та резервування. Пояснюється, як система забезпечує стійкість до високих навантажень, розподіл запитів між серверами, а також механізми резервування та відновлення у разі збоїв.
06:30 – Виклики та майбутні перспективи. Розглядаються поточні виклики: збільшення обсягів відео, боротьба з фейковим контентом, персоналізація. Також прогнозується впровадження новітніх технологій, зокрема штучного інтелекту.
07:02 – Висновки. Підбиваються підсумки доповіді. Робиться акцент на важливості складної, добре продуманої архітектури для підтримки стабільної роботи YouTube та його розвитку в майбутньому.




















ДОДАТОК Б
Слайди презентації доповіді

 
Рисунок 1 – Титульний слайд

 
Рисунок 2 – Зміст доповіді

 
Рисунок 3 – Вступ 

 
Рисунок 4 – Загальна архітектура YouTube
 
Рисунок 5 – Вимоги до архітектури 

 
Рисунок 6 – Модель доставки контенту
 
Рисунок 7 – Бекенд та фронтенд YouTube

 
Рисунок 8 – Бази даних 
 
Рисунок 9 – Технологічний стек

 
Рисунок 10 – Масштабованість та резервування
 
Рисунок 11 – Виклики та майбутні перспективи

 
Рисунок 12 - Висновки
