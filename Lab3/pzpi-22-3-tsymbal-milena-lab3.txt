Харківський національний університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії




ЗВІТ
до лабораторної роботи №3 з дисципліни
«Архітектура програмного забезпечення»
на тему: «РОЗРОБКА ПРОГРАМНОЇ АРХІТЕКТУРИ, СТВОРЕННЯ ТА ВІДЛАГОДЖЕННЯ ПРОГРАМНОГО КОДУ ВЕБ КЛІЄНТА ПРОГРАМНОЇ СИСТЕМИ»




Виконала
ст. гр. ПЗПІ-22-3
Цимбал Мілена Русланівна

Перевірив
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович





Харків 2025
1 ІСТОРІЯ ЗМІН

№	Дата	Версія звіту	Опис змін та виправлень
1	01.05.2025	0.1	Створено розділ «Історія змін», створено титульний лист. Додано базову структуру серверної частини для доробки
2	01.05.2025	0.1	Створено розділ «Опис виконаної роботи»
3	02.05.2025	0.1	Створено додаток Б, В.
4	02.05.2025	0.1	Створено відеозапис та наведено в додатку А.
5	03.05.2025	0.1	Створено розділ «Висновки».

2 ХІД РОБОТИ

Метою цієї лабораторної роботи є створення інтерфейсу користувача для програмної системи.

3 ОПИС ВИКОНАНОЇ РОБОТИ

	До виконаної роботи було підготовлено відеозвіт, посилання на який наведено в додатку А. 
Усі графічні матеріали представлені в додатку Б. 
У ході виконання роботи було розроблено повнофункціональний вебзастосунок, клієнтська частина якого реалізована з використанням бібліотеки React. Першим етапом стала розробка архітектури системи та визначення основного функціоналу, що включає відображення даних про користувача, його переміщення та історію контактів з іншими особами. У застосунку реалізовано авторизацію та реєстрацію користувачів з подальшим збереженням їхніх ролей та ідентифікаторів, а також функцію редагування особистої інформації та видалення акаунту. Особливу увагу приділено реалізації механізмів епідеміологічного аналізу: система обробляє отримані дані про контакти користувача, виводить рівень ризику зараження, перелік можливих захворювань, середню тривалість контактів і додаткові показники. Історія контактів подається у вигляді зручного списку із зазначенням часу, тривалості й місця взаємодії з іншими особами. У межах системного забезпечення реалізовано інтерфейс адміністратора бази даних, що дає змогу створювати резервні копії бази та відновлювати дані з .bak-файлів. Також впроваджено інструменти локального адміністрування, які дозволяють змінювати ролі користувачів і гнучко керувати доступом до функціоналу системи відповідно до наданих прав. Результатом є зручний і функціонально насичений вебзастосунок, здатний ефективно підтримувати епідеміологічний моніторинг та управління користувачами.
Фрагменти програмного коду окремих компонентів системи наведено в додатку В.














ВИСНОВКИ

У результаті виконання лабораторної роботи було розроблено клієнтську частину програмної системи для моніторингу місцезнаходження користувача в межах приміщення та його контактів з іншими особами. Було реалізовано користувацький інтерфейс для відображення ключової інформації, функціональні можливості для обробки та аналізу епідеміологічних даних, а також інструменти адміністрування системи. Крім того, у клієнтському застосунку було впроваджено підтримку локалізації та інтернаціоналізації.





















ДОДАТОК А
Відеозапис

Відеозапис презентації результатів лабораторної роботи: https://youtu.be/94U7g_9QPmo

Хронологічний опис відеозапису:
00:00 – Привітання. Коротке вітальне слово доповідача, ознайомлення з темою лабораторної роботи та стислий опис реалізованих функціональних можливостей програмної системи.
00:20 – Основні функції програмної системи. Демонструються базові можливості системи: додавання, редагування та видалення інформації користувача.
02:32 – Функції адміністратора платформи. Розглядаються можливості адміністратора, а саме управління ролями користувачів.
03:30 – Функції бізнес логіки програмної системи. Описано реалізацію ключового алгоритму аналізу епідеміологічних ризиків.
05:23 – Функції адміністратора БД. Пояснюється функціонал для роботи з базою даних: створення резервних копій і відновлення даних із них.
06:26 – Функції локалізації та інтерналізації. Демонструються можливості адаптації інтерфейсу системи до різних мовних та регіональних стандартів, включаючи формат часу й одиниці вимірювання.
07:04 – Висновки. Підсумовується проведена робота, оцінюється ефективність реалізованого функціоналу та обговорюються можливі напрями подальшого розвитку системи.





ДОДАТОК Б
Графічні матеріали

 
Рисунок Б.1 – ER діаграма

 
Рисунок Б.2 – Діаграма структури бази даних

 
Рисунок Б.3 – UML-діаграма прецедентів реєстрації та авторизації

 
Рисунок Б.4 – UML-діаграма прецедентів дій над контактами, переміщеннями та повідомленнями

 
Рисунок Б.5 – UML-діаграма прецедентів дій над лікарнями, зонами, кімнатами, девайсами









ДОДАТОК В
Програмний код

В.1 Математична обробка прикладних даних.
GitHub репозиторій: https://github.com/NureTsymbalMilena/apz-pzpi-22-3-tsymbal-milena/blob/main/Lab3/pzpi-22-3-tsymbal-milena-lab3/src/pages/Home/Home.jsx

   1: import './Home.css'
   2: import { useState, useEffect } from 'react';
   3: import toast from "react-hot-toast";
   4: import axios from 'axios';
   5: import '../../i18n';
   6: import i18n from 'i18next';
   7: import { useTranslation } from 'react-i18next';
   8:
   9: function Home() {
  10:     const { t } = useTranslation();
  11:     const [analysisData, setAnalysisData] = useState(null);
  12:     const [userId, setUserId] = useState(null);
  13:
  14:     useEffect(() => {
  15:     const fetchAnalysis = async () => {
  16:         const storedUserId = localStorage.getItem('userId');
  17:         if (!storedUserId) {
  18:             setUserId(null);
  19:             return;
  20:         }
  21:
  22:         setUserId(storedUserId);
  23:
  24:         try {
  25:
  26:         const response = await axios.post(
  27:             `http://localhost:5119/api/Contact/${storedUserId}/epidemiological-risk-analysis`,
  28:             {},
  29:             { withCredentials: true }
  30:         );
  31:
  32:         setAnalysisData(response.data);
  33:         } catch (error) {
  34:         toast.error(t('error.errorFetchingHospitals'));
  35:         console.error(error);
  36:         }
  37:     };
  38:
  39:     fetchAnalysis();
  40:     }, []);
  41:
  42:     const formatDuration = (durationString) => {
  43:         if (!durationString) return '—';
  44:
  45:         const [hours, minutes, rest] = durationString.split(':');
  46:         const seconds = Math.floor(parseFloat(rest));
  47:
  48:         const h = parseInt(hours);
  49:         const m = parseInt(minutes);
  50:
  51:         return `${h > 0 ? `${h} ${t('analysis.hours')} ` : ''}${m > 0 ? `${m} ${t('analysis.minutes')} ` : ''}${seconds} ${t('analysis.seconds')}`;
  52:
  53:     };
  54:
  55:     const formatDate = (dateString) => {
  56:         if (!dateString) return '—';
  57:         const date = new Date(dateString);
  58:         const currentLang = i18n.language || 'en';
  59:
  60:         return date.toLocaleString(currentLang, {
  61:             year: 'numeric',
  62:             month: '2-digit',
  63:             day: '2-digit',
  64:             hour: '2-digit',
  65:             minute: '2-digit',
  66:             second: '2-digit',
  67:         });
  68:     };
  69:
  70:     const formatDistance = (meters) => {
  71:         if (meters == null) return '—';
  72:
  73:         const currentLang = i18n.language || 'en';
  74:
  75:         if (currentLang === 'en' || currentLang.startsWith('en')) {
  76:             const feet = meters * 3.28084;
  77:             return `${feet.toFixed(1)} ft`;
  78:         }
  79:
  80:         return `${meters.toFixed(1)} м`;
  81:     };
  82:
  83:     if (!userId) return null;
  84:
  85:     return (
  86:         <div className="homeWrapper">
  87:             <h2 className="authTitle">{t('analysis.title')}</h2>
  88:             <div className="homeContainer">
  89:                 <div className='homeInfoItem'>
  90:                     <p className="homeText">{t('analysis.name')}:</p>
  91:                     <p>{analysisData?.name || '—'} {analysisData?.surname || '—'}</p>
  92:                 </div>
  93:                 <div className='homeInfoItem'>
  94:                     <p className="homeText">{t('analysis.disease')}:</p>
  95:                     <p>{analysisData?.userDisease?.name || 'None'}</p>
  96:                 </div>
  97:                 <div className='homeInfoItem'>
  98:                     <p className="homeText">{t('analysis.isContagious')}:</p>
  99:                     <p>{analysisData?.isContagious ? 'Yes' : 'No'}</p>
 100:                 </div>
 101:                 <div className='homeInfoItem'>
 102:                     <p className="homeText">{t('analysis.totalRisk')}:</p>
 103:                     <p>{analysisData?.totalRisk?.toFixed(2) || '—'}</p>
 104:                 </div>
 105:                 <div className='homeInfoItem'>
 106:                     <p className="homeText">{t('analysis.riskLevel')}:</p>
 107:                     <p>{analysisData?.riskLevel || '—'}</p>
 108:                 </div>
 109:                 <div className='homeInfoItem'>
 110:                     <p className="homeText">{t('analysis.averageContactDuration')}:</p>
 111:                     <p>{formatDuration(analysisData?.averageContactDuration)}</p>
 112:                 </div>
 113:                 <div className='homeInfoItem'>
 114:                     <p className="homeText">{t('analysis.potentialDiseases')}:</p>
 115:                     <p>{analysisData?.potentialDiseases?.join(', ') || 'None'}</p>
 116:                 </div>
 117:                 <div className='homeInfoItem'>
 118:                     <p className="homeText">{t('analysis.contacts')}:</p>
 119:                     <p>{analysisData?.contacts?.length || 0}</p>
 120:                 </div>
 121:             </div>
 122:             {analysisData?.contacts?.length > 0 && (
 123:                 <table>
 124:                     <thead>
 125:                         <tr>
 126:                             <th>{t('analysis.name')}</th>
 127:                             <th>{t('analysis.surname')}</th>
 128:                             <th>{t('analysis.disease')}</th>
 129:                             <th>{t('analysis.roomName')}</th>
 130:                             <th>{t('analysis.minimalDistance')}</th>
 131:                             <th>{t('analysis.contactStartTime')}</th>
 132:                             <th>{t('analysis.contactEndTime')}</th>
 133:                         </tr>
 134:                     </thead>
 135:                     <tbody>
 136:                         {analysisData.contacts.map((contact, index) => (
 137:                             <tr key={index}>
 138:                                 <td>{contact.userName}</td>
 139:                                 <td>{contact.userSurname}</td>
 140:                                 <td>{contact.userDisease}</td>
 141:                                 <td>{contact.roomName}</td>
 142:                                 <td>{formatDistance(contact.minDistance)}</td>
 143:                                 <td>{formatDate(contact.contactStartTime)}</td>
 144:                                 <td>{formatDate(contact.contactEndTime)}</td>
 145:                             </tr>
 146:                         ))}
 147:                     </tbody>
 148:                 </table>
 149:             )}
 150:         </div>
 151:     )
 152: }
 153:
 154: export default Home

В.2 Резервне копіювання користувацьких даних.
GitHub репозиторій: https://github.com/NureTsymbalMilena/apz-pzpi-22-3-tsymbal-milena/blob/main/Lab3/pzpi-22-3-tsymbal-milena-lab3/src/pages/Backup/Backup.jsx

1: import './Backup.css'
   2: import axios from 'axios';
   3: import React, {useState} from 'react';
   4: import toast from "react-hot-toast";
   5: import '../../i18n';
   6: import { useTranslation } from 'react-i18next';
   7:
   8: function Backup() {
   9:     const { t } = useTranslation();
  10:     const [backupPath, setBackupPath] = useState('');
  11:     const [restoreFilePath, setRestoreFilePath] = useState('');
  12:
  13:     const handleBackupSubmit = async (e) => {
  14:         e.preventDefault();
  15:         try {
  16:             const formData = new FormData();
  17:             formData.append("outputDirectory", backupPath);
  18:
  19:             const response = await axios.post(
  20:                 `http://localhost:5119/api/Admin/backup`,
  21:                 formData,
  22:                 {
  23:                     headers: {
  24:                         'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,
  25:                     },
  26:                     withCredentials: true
  27:                 }
  28:             );
  29:             toast.success(response.data.message);
  30:             setBackupPath('');
  31:         } catch (error) {
  32:             toast.error(error?.response?.data?.message || t('error.backupFailed'));
  33:         }
  34:     };
  35:
  36:     const handleRestoreSubmit = async (e) => {
  37:         e.preventDefault();
  38:
  39:         if (!restoreFilePath) {
  40:             toast.error(t('error.pleasSelectABakFile'));
  41:             return;
  42:         }
  43:
  44:         try {
  45:             const response = await axios.post(
  46:                 `http://localhost:5119/api/Admin/restore`,
  47:                 JSON.stringify(restoreFilePath),
  48:                 {
  49:                     headers: {
  50:                         'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,
  51:                         'Content-Type': 'application/json',
  52:                     },
  53:                     withCredentials: true
  54:                 }
  55:             );
  56:             toast.success(response.data.message);
  57:             setRestoreFilePath('');
  58:         } catch (error) {
  59:             toast.error(error?.response?.data?.message || t('error.restoreFailed'));
  60:         }
  61:     };
  62:
  63:     return (
  64:         <div className="wrapper">
  65:             <div className="container backup">
  66:                 <form onSubmit={handleBackupSubmit}>
  67:                     <h2 className="title">{t('backup.backupTitle')}</h2>
  68:                     <div className='formItems'>
  69:                         <div className="formGroup">
  70:                             <label htmlFor="backupPath">{t('backup.backupDirectory')}</label>
  71:                             <input
  72:                                 type="text"
  73:                                 id="backupPath"
  74:                                 name="backupPath"
  75:                                 placeholder={t('backup.backupPlaceholder')}
  76:                                 value={backupPath}
  77:                                 onChange={(e) => setBackupPath(e.target.value)}
  78:                                 required
  79:                             />
  80:                         </div>
  81:                     </div>
  82:                     <button type="submit">{t('backup.backupTitle')}</button>
  83:                 </form>
  84:             </div>
  85:
  86:             <div className="container">
  87:                 <form onSubmit={handleRestoreSubmit}>
  88:                     <h2 className="title">{t('backup.restoreTitle')}</h2>
  89:                     <div className='formItems'>
  90:                         <div className="formGroup">
  91:                             <label htmlFor="restoreFilePath">{t('backup.selectBakFile')}</label>
  92:                             <input
  93:                                 type="text"
  94:                                 id="restoreFilePath"
  95:                                 placeholder={t('backup.restorePlaceholder')}
  96:                                 value={restoreFilePath}
  97:                                 onChange={(e) => setRestoreFilePath(e.target.value)}
  98:                                 required
  99:                             />
 100:                         </div>
 101:                     </div>
 102:                     <button type="submit">{t('backup.restoreTitle')}</button>
 103:                 </form>
 104:             </div>
 105:         </div>
 106:     );
 107: }
 108:
 109: export default Backup;

	В.3 Адміністрування бізнес-логіки системи. Адміністратор платформи.
GitHub репозиторій: https://github.com/NureTsymbalMilena/apz-pzpi-22-3-tsymbal-milena/blob/main/Lab3/pzpi-22-3-tsymbal-milena-lab3/src/pages/ChangeRole/ChangeRole.jsx

1: import './ChangeRole.css'
   2: import React, { useState, useEffect } from 'react';
   3: import toast from "react-hot-toast";
   4: import axios from 'axios';
   5: import '../../i18n';
   6: import { useTranslation } from 'react-i18next';
   7:
   8: function ChangeRole() {
   9:     const { t } = useTranslation();
  10:     const [formData, setFormData] = useState({
  11:         UserEmail: '',
  12:         Role: '',
  13:     });
  14:     const [users, setUsers] = useState([]);
  15:     const roles = ['User', 'PlatformAdmin', 'SystemAdmin', 'DatabaseAdmin', 'HospitalAdmin'];
  16:
  17:     useEffect(() => {
  18:         const fetchUsers = async () => {
  19:             try {
  20:                 const response = await axios.get('http://localhost:5119/api/User');
  21:                 setUsers(response.data);
  22:             } catch (error) {
  23:                 toast.error(t('error.errorFetchingUsers'));
  24:                 console.error(error);
  25:             }
  26:         };
  27:
  28:         fetchUsers();
  29:     }, []);
  30:
  31:     const handleChange = (e) => {
  32:         const { name, value } = e.target;
  33:         setFormData(prev => ({ ...prev, [name]: value }));
  34:     };
  35:
  36:     const handleSubmit = async (e) => {
  37:         e.preventDefault();
  38:
  39:         try {
  40:              await axios.patch(
  41:                 'http://localhost:5119/api/Admin/role',formData,
  42:                 {
  43:                     withCredentials: true,
  44:                     headers: {
  45:                         'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,
  46:                         'Content-Type': 'application/json'
  47:                     }
  48:                 }
  49:             );
  50:
  51:             toast.success(t('error.youChangedRoleSuccessfully'));
  52:         } catch (error) {
  53:             toast.error(error.response?.data?.message || t('error.errorChangingRole'));
  54:             console.error(error);
  55:         }
  56:     };
  57:
  58:     return (
  59:         <div className="wrapper">
  60:             <div className="container">
  61:                 <form onSubmit={handleSubmit}>
  62:                     <h2 className="title">{t('changeRole.title')}</h2>
  63:                     <div className='formItems'>
  64:                         <label htmlFor="Email">{t('changeRole.email')}</label>
  65:                         <select
  66:                             id="UserEmail"
  67:                             name="UserEmail"
  68:                             value={formData.UserEmail}
  69:                             onChange={handleChange}
  70:                             required
  71:                         >
  72:                             <option value="">{t('changeRole.selectAnEmail')}</option>
  73:                             {users.map(user => (
  74:                                 <option key={user.userId} value={user.email}>
  75:                                     {user.email}
  76:                                 </option>
  77:                             ))}
  78:                         </select>
  79:                         <label htmlFor="Role">{t('changeRole.role')}</label>
  80:                         <select
  81:                             id="Role"
  82:                             name="Role"
  83:                             value={formData.Role}
  84:                             onChange={handleChange}
  85:                             required
  86:                         >
  87:                             <option value="">{t('changeRole.selectARole')}</option>
  88:                             {roles.map(role => (
  89:                                 <option key={role} value={role}>
  90:                                     {role}
  91:                                 </option>
  92:                             ))}
  93:                         </select>
  94:                     </div>
  95:                     <button type="submit">{t('changeRole.button')}</button>
  96:                 </form>
  97:             </div>
  98:         </div>
  99:     )
 100: }
 101:
 102: export default ChangeRole
